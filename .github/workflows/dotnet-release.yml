name: .NET Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: windows-latest

    env:
      TestSettings__TransactionDigest2: ${{ secrets.TEST_TRANSACTION_DIGEST2 }}
      TestSettings__TransactionDigest: ${{ secrets.TEST_TRANSACTION_DIGEST }}
      TestSettings__ObjectId2: ${{ secrets.TEST_OBJECT_ID2 }}
      TestSettings__ObjectId: ${{ secrets.TEST_OBJECT_ID }}
      TestSettings__Address: ${{ secrets.TEST_ADDRESS }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: get_version
      run: |
        VERSION=$(echo ${GITHUB_REF#refs/tags/v})
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
        # Extract base version without prerelease identifiers for assembly version
        BASE_VERSION=$(echo $VERSION | cut -d '-' -f 1)
        echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Update project version
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"        # Full version with -alpha
        $baseVersion = "${{ steps.get_version.outputs.BASE_VERSION }}" # Just numeric part
    
        $csprojFile = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Where-Object { Select-String -Path $_.FullName -Pattern "<Title>Iota.Rebased.Sdk</Title>" -Quiet } | Select-Object -First 1
    
        if ($csprojFile) {
          Write-Host "Updating version in $($csprojFile.FullName)"
          Write-Host "Package Version: $version"
          Write-Host "Assembly Version: $baseVersion"
      
          $xml = [xml](Get-Content $csprojFile.FullName)
          $propertyGroup = $xml.Project.PropertyGroup
      
          # Update version properties
          $propertyGroup.Version = $version                # NuGet package version with -alpha
          $propertyGroup.AssemblyVersion = $baseVersion    # Assembly version without -alpha
          $propertyGroup.FileVersion = $baseVersion        # File version without -alpha
      
          $xml.Save($csprojFile.FullName)
        } else {
          Write-Error "Could not find project file"
          exit 1
        }
      shell: pwsh
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore -noWarn:NUnit2005
      
    - name: Run tests
      run: dotnet test iota-sdk-tests/iota-sdk-tests.csproj --configuration Release --verbosity normal

    - name: Find and push NuGet package
      if: success() && startsWith(github.ref, 'refs/tags/v')
      run: |
        $packagePath = Get-ChildItem -Path . -Filter *.nupkg -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if ($packagePath) {
          Write-Host "Found package: $packagePath"
          dotnet nuget push $packagePath --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        } else {
          Write-Error "No NuGet package found"
          exit 1
        }
      shell: pwsh